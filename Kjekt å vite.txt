# OPERATORER 
	Medlemsoperatoren
		(.) variabelnavn.medlem
	

# STRUCTS
Alt er default public: i structs
	struct Circle{
		double radius;
		double color;

	}

	Circle c = {5.6, BLACK};

	int a = c.radius;

De struct typene vi lager er “ukjente” for operatorer som *+-<>== ..

#include <iostream>
#include <ctime>

using namespace std;

enum Color {BLACK, WHITE, GREY};
const double PI = 3.14;

struct Circle{
    double radius;
    Color color;
};

double areal(Circle c){

    return c.radius * c.radius * PI;
}


int main(){
    Circle c = {5.6, BLACK};
    c.radius = 5.6;
    c.color = WHITE;

    cout << "Areal " << areal(c) << endl;
}

# KLASSER
Ved hjelp av class kan vi definere data elementene og funksjonene som en samlet type

### EKSEMPEL
class Circle{
public: //Hva betyr public?
	double radius;
	double areal();
	double circumference();
}

Vi kan lage arrays av sirkler.
Circle sirkler[100]

class 1 = class2 setter class1 lik class 2

Som hvilkensomhelst annen datatype

• Metoder kalles vha a.medlem = 5;
• Vanlig å implementere funksjoner først og så kalle de senere.

## PUBLIC 	VS		PRIVATE
hva som skal være synlig for ekstern kode.
i main så kan vi lese og skrive alt som er public. setter vi det derimot som private så får vi ikke lov til å skrive til klassene. Vanligvis en privat del og en public del. Funksjoner er public og medlemsvariabler er private.

Medlemsfunksjoner får lese/skrive tilgang til kalssen

Sett variabler til private og kalle en medlemsfunksjon som skriver til de.

## OPERATORER
+ / - * %

variabel+ 		: betyr variabel = variabel + 1
variabel++ 	: er variabel = variabel + 2
33.0 % 3.0 	: gir ikke mening modulo int % int = int

0000 0000 = 0 = ‘\0’, er nulltermineringstegnet


## VARIABLER
- Globale variabler bør begrenses til det strengt nødvendige
— anvendelige 
- Levetiden til variabler begrenses til {•••}-løkken de er deklarert i. 
-  Følgende konverteringsrekkefølge
char => int => float => double
char + int = int, int + float = float, char + float = float.

## CASTING	static_cast<type>(), type{char, int, float, double}
static_cast<int>(3.14) = 3
static_cast<int>(3.0) % 2 = 1
static_cast<double>(3)/2 = 1.5
static_cast<double>(3/2) = 1

! Casting runder av nedover som en floor-funksjon

## KRØLLPARANTESER
{
	int y = 19;
	cout << y << endl;
}

Det er ikke nødvendig å deklarere en funksjon. For å bruke krøllparanteser. Hvordan få adgang til en slik løkke?

# DEBUGGING

## CALL BY REFERENCE
int function(*b, a, c){
	*b = a + c;
	return *b;
}

int function(b, a, c, &x0, &x1){
	x0 = a + c;
	x1 = a*b*c
	return *b;
}

## include <string>
bibliotek for å behandle stringer.

 int main(){
	string s;
	string s1 = “Hello”;
	string s2 = “World”;
	string s3 = s1 + s2;
	cout << s3;
}

getline(cin, s) // er en funksjon som henter en hel linje med test.

int main(){
	cout << “skriv tekst”;
	getline(cin, s); //linje med skrift er helt til enter
	cout << s << endl;
}

## include <vector>
tilgang til en datatype som heter vector. En container tilsvarende en tabell. 

int main(){
	
}

# IOSTREAMS (lese/skrive filer)


## Filer
#include <fstream>
- tekstfiler
- bilder

input håndteres av ‘ifstream’, output av ‘ofstream’

while(getline(input, s))